


‡§¨‡§π‡•Å‡§§ ‡§¨‡§¢‡§º‡§ø‡§Ø‡§æ ‡§∏‡§µ‡§æ‡§≤! ‡§Ö‡§ó‡§∞ ‡§§‡•Å‡§Æ Flutter ‡§Æ‡•á‡§Ç **BLoC (Business Logic Component)** pattern ‡§ï‡§æ ‡§á‡§∏‡•ç‡§§‡•á‡§Æ‡§æ‡§≤ ‡§ï‡§∞ ‡§∞‡§π‡•á ‡§π‡•ã, ‡§§‡•ã ‡§á‡§∏‡§Æ‡•á‡§Ç ‡§ï‡•Å‡§õ **important top-level functions** ‡§î‡§∞ concepts ‡§π‡•ã‡§§‡•á ‡§π‡•à‡§Ç ‡§ú‡•ã ‡§¨‡§æ‡§∞-‡§¨‡§æ‡§∞ ‡§ï‡§æ‡§Æ ‡§Ü‡§§‡•á ‡§π‡•à‡§Ç‡•§

---

### üîù BLoC ‡§Æ‡•á‡§Ç ‡§∏‡§¨‡§∏‡•á ‡§ú‡§º‡•ç‡§Ø‡§æ‡§¶‡§æ use ‡§π‡•ã‡§®‡•á ‡§µ‡§æ‡§≤‡•á top functions/concepts:

#### 1. **`add(event)`**
- Event ‡§ï‡•ã BLoC ‡§Æ‡•á‡§Ç ‡§≠‡•á‡§ú‡§®‡•á ‡§ï‡•á ‡§≤‡§ø‡§è‡•§
- Example:
  ```dart
  myBloc.add(LoadDataEvent());
  ```

#### 2. **`mapEventToState`** (‡§Ö‡§ó‡§∞ ‡§§‡•Å‡§Æ ‡§™‡•Å‡§∞‡§æ‡§®‡§æ Bloc ‡§á‡§∏‡•ç‡§§‡•á‡§Æ‡§æ‡§≤ ‡§ï‡§∞ ‡§∞‡§π‡•á ‡§π‡•ã)
- ‡§π‡§∞ event ‡§™‡§∞ ‡§ï‡•ç‡§Ø‡§æ ‡§π‡•ã‡§®‡§æ ‡§ö‡§æ‡§π‡§ø‡§è, ‡§Ø‡§π ‡§¨‡§§‡§æ‡§§‡§æ ‡§π‡•à‡•§
- ‡§Ö‡§¨ modern BLoC ‡§Æ‡•á‡§Ç ‡§á‡§∏‡•á `on<Event>()` ‡§∏‡•á replace ‡§ï‡§ø‡§Ø‡§æ ‡§ó‡§Ø‡§æ ‡§π‡•à‡•§

#### 3. **`on<EventName>((event, emit) {})`**
- ‡§π‡§∞ event ‡§™‡§∞ ‡§ï‡•ç‡§Ø‡§æ state emit ‡§ï‡§∞‡§®‡•Ä ‡§π‡•à‡•§
- Example:
  ```dart
  on<LoadDataEvent>((event, emit) {
    emit(LoadingState());
    // fetch data
    emit(DataLoadedState(data));
  });
  ```

#### 4. **`emit(state)`**
- ‡§®‡§Ø‡§æ state ‡§≠‡•á‡§ú‡§®‡•á ‡§ï‡•á ‡§≤‡§ø‡§è‡•§
- ‡§¨‡§∏ `on<Event>` ‡§Ø‡§æ `mapEventToState` ‡§ï‡•á ‡§Ö‡§Ç‡§¶‡§∞ ‡§Ø‡•Ç‡§ú‡§º ‡§π‡•ã‡§§‡§æ ‡§π‡•à‡•§

#### 5. **`BlocProvider`**
- BLoC ‡§ï‡•ã widget tree ‡§Æ‡•á‡§Ç available ‡§ï‡§∞‡§æ‡§®‡•á ‡§ï‡•á ‡§≤‡§ø‡§è‡•§
- Example:
  ```dart
  BlocProvider(
    create: (_) => MyBloc(),
    child: MyHomePage(),
  );
  ```

#### 6. **`BlocBuilder`**
- State ‡§ï‡•á changes ‡§ï‡•ã UI ‡§Æ‡•á‡§Ç ‡§¶‡§ø‡§ñ‡§æ‡§®‡•á ‡§ï‡•á ‡§≤‡§ø‡§è‡•§
- Example:
  ```dart
  BlocBuilder<MyBloc, MyState>(
    builder: (context, state) {
      if (state is LoadingState) {
        return CircularProgressIndicator();
      }
      return Text("Data Loaded");
    },
  );
  ```

#### 7. **`BlocListener`**
- ‡§è‡§ï ‡§¨‡§æ‡§∞ ‡§ï‡§æ ‡§ï‡§æ‡§Æ ‡§ï‡§∞‡§®‡•á ‡§ï‡•á ‡§≤‡§ø‡§è, ‡§ú‡•à‡§∏‡•á snackbar ‡§¶‡§ø‡§ñ‡§æ‡§®‡§æ‡•§

---

### Bonus: ‡§∏‡§¨‡§∏‡•á common structure

```dart
// Events
abstract class MyEvent {}
class LoadDataEvent extends MyEvent {}

// States
abstract class MyState {}
class LoadingState extends MyState {}
class DataLoadedState extends MyState {
  final List data;
  DataLoadedState(this.data);
}

// Bloc
class MyBloc extends Bloc<MyEvent, MyState> {
  MyBloc() : super(LoadingState()) {
    on<LoadDataEvent>((event, emit) {
      // fetch data
      emit(DataLoadedState(["Apple", "Banana"]));
    });
  }
}
```

---

‡§Ö‡§ó‡§∞ ‡§ö‡§æ‡§π‡•ã ‡§§‡•ã ‡§Æ‡•à‡§Ç ‡§è‡§ï ‡§õ‡•ã‡§ü‡§æ runnable BLoC example ‡§≠‡•Ä ‡§¨‡§®‡§æ ‡§∏‡§ï‡§§‡§æ ‡§π‡•Ç‡§Å Flutter ‡§ï‡•á ‡§≤‡§ø‡§è‡•§ ‡§¨‡§®‡§æ‡§ä‡§Å?